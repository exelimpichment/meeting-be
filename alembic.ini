# A generic, single database configuration.

[alembic]
# Path to migration scripts
# Use forward slashes (/) also on Windows to provide an OS-agnostic path
script_location = alembic

# Template used to generate migration file names; The default value is %%(rev)s_%%(slug)s
# Uncomment the line below if you want the files to be prepended with date and time
# See https://alembic.sqlalchemy.org/en/latest/tutorial.html#editing-the-ini-file
# for all available tokens
# file_template = %%(year)d_%%(month).2d_%%(day).2d_%%(hour).2d%%(minute).2d-%%(rev)s_%%(slug)s

# sys.path path, will be prepended to sys.path if present.
# Defaults to the current working directory.
prepend_sys_path = .

# Timezone to use when rendering the date within the migration file
# as well as the filename.
# If specified, requires python>=3.9 or backports.zoneinfo and tzdata libraries.
# Any required deps can be installed by adding `alembic[tz]` to the pip requirements.
# String value is passed to ZoneInfo(); leave blank for localtime.
# timezone =

# Max length of characters to apply to the "slug" field
# truncate_slug_length = 40

# Set to 'true' to run the environment during
# the 'revision' command, regardless of autogenerate
# revision_environment = false

# Set to 'true' to allow .pyc and .pyo files without
# a source .py file to be detected as revisions in the versions/ directory
# sourceless = false

# Version location specification; This defaults to alembic/versions.
# When using multiple version directories, initial revisions must be specified with --version-path.
# The path separator used here should match "version_path_separator" below.
# version_locations = %(here)s/bar:%(here)s/bat:alembic/versions

# Version path separator; This is the character used to split version_locations.
# Default is "os", which uses os.pathsep. If omitted, legacy behavior splits on spaces/commas.
# Valid values: ":", ";", "space", "newline".
version_path_separator = os

# Set to 'true' to search source files recursively in each "version_locations" directory
# New in Alembic version 1.10
# recursive_version_locations = false

# The output encoding used when revision files are written from script.py.mako
# output_encoding = utf-8

# Optional: SQLAlchemy URL (overridden by env.py, so can be omitted or used as a fallback)
# sqlalchemy.url = mysql+pymysql://meeting-app:NoRtOn19111996@localhost:3306/meeting_app_db?charset=utf8mb4

[post_write_hooks]
# Post-write hooks define scripts or Python functions that are run
# on newly generated revision scripts. See the documentation for further details and examples.

# Format using "black" - use the console_scripts runner, against the "black" entrypoint
# hooks = black
# black.type = console_scripts
# black.entrypoint = black
# black.options = -l 79 REVISION_SCRIPT_FILENAME

# Lint with attempts to fix using "ruff" - use the exec runner, execute a binary
# hooks = ruff
# ruff.type = exec
# ruff.executable = %(here)s/.venv/bin/ruff
# ruff.options = check --fix REVISION_SCRIPT_FILENAME

# Logging configuration
[loggers]
keys = root,sqlalchemy,alembic

[handlers]
keys = console

[formatters]
keys = generic

[logger_root]
level = WARNING
handlers = console
qualname =

[logger_sqlalchemy]
level = WARNING
handlers =
qualname = sqlalchemy.engine

[logger_alembic]
level = INFO
handlers =
qualname = alembic

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[formatter_generic]
format = %(levelname)-5.5s [%(name)s] %(message)s
datefmt = %H:%M:%S